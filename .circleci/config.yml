version: 2.1
orbs:
  codecov: codecov/codecov@3.3.0
  aws-cli: circleci/aws-cli@3.2.0
  slack: circleci/slack@4.12.5

jobs:
  install_and_update_dependencies:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "Pipfile.lock" }}
      - run: &install-pipenv pip install -U pipenv==2023.6.26 urllib3 wheel==0.38.4 pip --quiet --no-input
      - run: pipenv sync --dev
      - run: pipenv run pipenv check # before save_cache so an insecure cache is never saved
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - run: pipenv run collectstatic
      - persist_to_workspace:
          root: ~/repo/
          paths: [
            lambda-layers/DependenciesLayer/requirements.txt,
            democracy_club/static_files/,
          ]
      - save_cache:
          when: on_success
          paths:
            - ~/.local/share/virtualenvs/
          key: v4-dependencies-{{ checksum "Pipfile.lock" }}

  test:
    docker:
      - image: cimg/python:3.12
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
      - image: cimg/postgres:16.3
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: democracy_club
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install HTML Tidy
          command: wget https://github.com/htacg/tidy-html5/releases/download/5.8.0/tidy-5.8.0-Linux-64bit.deb && sudo dpkg -i tidy-5.8.0-Linux-64bit.deb
      - run: *install-pipenv
      - run: pipenv run pipenv verify
      - run: pipenv run python manage.py check
      - run: pipenv run python manage.py makemigrations --check
      - run: pipenv run ruff check .
      - run: pipenv run ruff format . --check
      - run: pipenv run djhtml --check .
      - run: pipenv run pytest --cov-report=xml --cov=democracy_club
      - codecov/upload:
          file: /home/circleci/repo/coverage.xml
      - store_artifacts:
          path: test-reports
          destination: test-reports

  sam_build:
    docker:
      - image: public.ecr.aws/sam/build-python3.12:latest
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run: pip install --upgrade pip
      - run: pip install -r deploy-requirements.txt

      - run: sam build ${DASH_DASH_DEBUG} --template-file sam-template.yaml
      - persist_to_workspace:
          root: ~/repo/
          paths: [ .aws-sam/build/ ]

  sam_deploy:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      SAM_CONFIG_FILE: samconfig.toml.d/ci-<<parameters.dc-environment>>.toml
      DC_ENVIRONMENT: <<parameters.dc-environment>>
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "Pipfile.lock" }}
      - run: *install-pipenv
      - run: pip install -r deploy-requirements.txt

      - run:
          name: "pipenv run sam deploy # App: Lambda + API Gateway"
          command: |
            pipenv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/${SAM_CONFIG_FILE} \
              --config-env $DC_ENVIRONMENT \
              --template-file ~/repo/.aws-sam/build/template.yaml \
              --parameter-overrides "GitHash='$CIRCLE_SHA1'"
      - aws-cli/setup
      - run:
          name: "Migrate database"
          # Invoke Lambda using the AWS CLI. Grep for errors in the response because
          # the command will exit 0 even if the invocation failed. The JSON key `FunctionError` will contain something
          # if there's an error.
          command: |
            aws lambda invoke --function-name DCWebsiteManagementFunction --payload '{ "command": "migrate", "args": ["--no-input"] }' --cli-binary-format raw-in-base64-out -  | grep 'FunctionError": ""'
      - run:
          name: "Invalidate CloudFront cache"
          command: |
            aws lambda invoke --function-name DCWebsiteManagementFunction --payload '{ "command": "invalidate_cloudfront", "args": ["--paths", "*"] }' --cli-binary-format raw-in-base64-out -
      - run:
          name: "Publish a new Sentry Release"
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            sentry-cli releases --org democracy-club-gp new $CIRCLE_SHA1 --project dc-website
            sentry-cli releases --org democracy-club-gp set-commits --auto $CIRCLE_SHA1
            sentry-cli releases --org democracy-club-gp finalize $CIRCLE_SHA1
      # In the event the deployment has failed, alert the dev team
      - slack/notify:
            event: fail
            template: basic_fail_1
            channel: $SLACK_DEFAULT_CHANNEL
workflows:
  version: 2
  test_build_deploy:
    jobs:
      - install_and_update_dependencies
      - test:
          requires:
            - install_and_update_dependencies
      - sam_build:
          requires:
            - test
      - sam_deploy:
          name: sam_deploy_staging
          dc-environment: staging
          requires:
            - sam_build
          context: [ deployment-staging-dc-website, slack-secrets ]
          filters: { branches: { only: [ main, master, development ] } }
      - sam_deploy:
          name: sam_deploy_production
          dc-environment: production
          requires:
            - sam_deploy_staging
          context: [ deployment-production-dc-website, slack-secrets  ]
          filters: { branches: { only: [ main, master ] } }
